/*
 * File:   uart_tx_pic_cfg_xtal.c
 * Author: manoj
 * Writing to USART, using Xtal oscillator
 * Created on March 5, 2015, 6:01 PM
 */

#include <xc.h>
#include <stdint.h>

// PLL with pre-scaler and post-scale options is a way to derive multiple
// freq from the same source, e.g. for low=6Mhz/high=48Mhz speed USB and for MCU clock
// Input to PLL has to be 4 Mhz and its output is 96 MHz
// So, for e.g. if we are using exernal 20 MHz osc, its o/p has to be
// divided by 5 to get 4 Mhz input for PLL
// PLLDIV is prescaler, o/p has to be 4MHz
// CPUDIV and USBDIV are postscalers, input is 96Mhz

#pragma config PLLDIV   = 5         // (20 MHz crystal on PICDEM FS USB board)
#pragma config CPUDIV   = OSC1_PLL2
#pragma config USBDIV   = 2         // Clock source from 96MHz PLL/2
#pragma config FOSC     = HSPLL_HS

#pragma config IESO     = OFF
#pragma config WDT = OFF
#pragma config STVREN = ON
#pragma config LVP = ON
#pragma config BOR = ON
#pragma config MCLRE = ON
#pragma config PWRT = OFF
#pragma config PBADEN = OFF

// Effective CPU Freq, considering PLL and CPUDIV. Needed for the delay routines
#define _XTAL_FREQ 48000000

/*
 *
 */

void write_usart( char c){
    while(!TXIF); //Waits till TXIF = 0 , TXIF is set when register is empty
    TXREG = c;
    NOP();// Give time for TXIF after setting TXREG
    //while( !TRMT);  // Wait till TSR reg is empty, i.e transmitted
}

int main(int argc, char** argv)
{

    SPEN = 1; // enable serial port
    TRISCbits.RC6 = 0; //TX pin set as output
    //N*(BRG+1) = Fosc/Baud Rate : 8bit+LO:N=64, 8bit+HI:N=16, 16bit+HI,N=4
    TXSTAbits.SYNC = 0; //0 = Asynchronous mode
    TXSTAbits.TXEN = 1; //1 = Transmit enabled
    TXSTAbits.BRGH = 1; //1 = High speed
    TXSTAbits.TX9 = 0; //0 = Selects 8-bit transmission
    TXCKP = 0; // invert signal ? Does not seem to work. Use transistor inverter.
    BAUDCONbits.BRG16 = 1; //0 = 8-bit Baud Rate Generator is used (SPBRGx)
    SPBRGH = 1249 >> 8; // 9600 baud
    SPBRG = 1249 & 0xFF;

    while(1)
    {
        write_usart('B');
    }
}
